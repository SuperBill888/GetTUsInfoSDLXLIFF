<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GeneralCaption" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="IF4Description" xml:space="preserve">
    <value>4-channel 12bit analog voltage and current input module</value>
  </data>
  <data name="IFxAlarmLimitCaption" xml:space="preserve">
    <value>Alarm Limits</value>
  </data>
  <data name="IFxCH0PageName" xml:space="preserve">
    <value>Channel 0</value>
  </data>
  <data name="IFxCH1PageName" xml:space="preserve">
    <value>Channel 1</value>
  </data>
  <data name="IFxCH2PageName" xml:space="preserve">
    <value>Channel 2</value>
  </data>
  <data name="IFxCH3PageName" xml:space="preserve">
    <value>Channel 3</value>
  </data>
  <data name="IFxEnableChannel" xml:space="preserve">
    <value>E_nable Channel</value>
  </data>
  <data name="IFxExceedValueRangeMessage" xml:space="preserve">
    <value>{0} value can not exceed {1} value: {2}.</value>
  </data>
  <data name="IFxHAlarm" xml:space="preserve">
    <value>High A_larm</value>
  </data>
  <data name="IFxHHAEnableMessage" xml:space="preserve">
    <value>When High High Alarm is enabled, High Alarm can't be disabled.</value>
  </data>
  <data name="IFxHHAlarm" xml:space="preserve">
    <value>Hi_gh High Alarm</value>
  </data>
  <data name="IFxInputFilter" xml:space="preserve">
    <value>_Input Filter:</value>
  </data>
  <data name="IFxInputFilter_2PointMovingAverage" xml:space="preserve">
    <value>2-Point Moving Average</value>
  </data>
  <data name="IFxInputFilter_4PointMovingAverage" xml:space="preserve">
    <value>4-Point Moving Average</value>
  </data>
  <data name="IFxInputFilter_50_60HzRejection" xml:space="preserve">
    <value>50/60Hz Rejection</value>
  </data>
  <data name="IFxInputFilter_8PointMovingAverage" xml:space="preserve">
    <value>8-Point Moving Average</value>
  </data>
  <data name="IFxInputFilter_NoFilter" xml:space="preserve">
    <value>No Filter</value>
  </data>
  <data name="IFxInputFormat" xml:space="preserve">
    <value>D_ata Format:</value>
  </data>
  <data name="IFxInputFormat_EngUnits" xml:space="preserve">
    <value>Engineering Units</value>
  </data>
  <data name="IFxInputFormat_Percent" xml:space="preserve">
    <value>Percent Range</value>
  </data>
  <data name="IFxInputFormat_RawData" xml:space="preserve">
    <value>Raw/Proportional Data</value>
  </data>
  <data name="IFxMessageBoxCaption" xml:space="preserve">
    <value>Connected Components Workbench</value>
  </data>
  <data name="IFxInputRangeChangeMessage" xml:space="preserve">
    <value>Changing the Input Range will result in Alarm Limit Values being set to default Values.

Click Yes To Continue.</value>
  </data>
  <data name="IFxInputRangeUnitA" xml:space="preserve">
    <value>mA</value>
  </data>
  <data name="IFxInputRangeUnitV" xml:space="preserve">
    <value>V</value>
  </data>
  <data name="IFxInputRange_0_10V" xml:space="preserve">
    <value>0V to 10V</value>
  </data>
  <data name="IFxInputRange_0_20mA" xml:space="preserve">
    <value>0mA to 20mA</value>
  </data>
  <data name="IFxInputRange_10V" xml:space="preserve">
    <value>-10V to 10V</value>
  </data>
  <data name="IFxInputRange_4_20mA" xml:space="preserve">
    <value>4mA to 20mA</value>
  </data>
  <data name="IFxLAlarm" xml:space="preserve">
    <value>Low Ala_rm</value>
  </data>
  <data name="IFxLLAEnableMessage" xml:space="preserve">
    <value>When Low Low Alarm is enabled, Low Alarm can't be disabled.</value>
  </data>
  <data name="IFxLLAlarm" xml:space="preserve">
    <value>L_ow Low Alarm</value>
  </data>
  <data name="IFxMaximumAlarm" xml:space="preserve">
    <value>Maximum Alarm</value>
  </data>
  <data name="IFxMessageCaption" xml:space="preserve">
    <value>Connected Components Workbench</value>
  </data>
  <data name="IFxMinimumAlarm" xml:space="preserve">
    <value>Minimum Alarm</value>
  </data>
  <data name="IFxMinMaxInputRange" xml:space="preserve">
    <value>_Min-Max Input Range:</value>
  </data>
  <data name="IFxRestoreDefCaption" xml:space="preserve">
    <value>Restore Defaults</value>
  </data>
  <data name="IFxUnderValueRangeMessage" xml:space="preserve">
    <value>{0} value can not be smaller than {1} value: {2}.</value>
  </data>
  <data name="PageNameFormatStr" xml:space="preserve">
    <value>{0} - {1}</value>
  </data>
  <data name="IFxPercentRangeUnitCaption" xml:space="preserve">
    <value>%</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
 <data name="IFxCH4PageName" xml:space="preserve">
    <value>Channel 4</value>
  </data>
  <data name="IFxCH5PageName" xml:space="preserve">
    <value>Channel 5</value>
  </data>
  <data name="IFxCH6PageName" xml:space="preserve">
    <value>Channel 6</value>
  </data>
  <data name="IFxCH7PageName" xml:space="preserve">
    <value>Channel 7</value>
  </data>
  <data name="IFxHAlarmOutMaxRangeMessage" xml:space="preserve">
    <value>High Alarm can not be greater than {0}.</value>
  </data>
  <data name="IFxHAlarmOutMinRangeMessage" xml:space="preserve">
    <value>High Alarm can not be smaller than {0}.</value>
  </data>
  <data name="IFxHAlarmOverHHAlarm" xml:space="preserve">
    <value>High Alarm can not be greater than High High Alarm.</value>
  </data>
  <data name="IFxHAlarmUnderLAlarm" xml:space="preserve">
    <value>High Alarm can not be smaller than Low Alarm.</value>
  </data>
  <data name="IFxHHAarmUnderHAlarm" xml:space="preserve">
    <value>High High Alarm can not be smaller than High Alarm.</value>
  </data>
  <data name="IFxHHAlarmOutMaxRangeMessage" xml:space="preserve">
    <value>High High Alarm can not be greater than {0}.</value>
  </data>
  <data name="IFxHHAlarmOutMinRangeMessage" xml:space="preserve">
    <value>High High Alarm can not be smaller than {0}.</value>
  </data>
  <data name="IFxLAlarmOutMaxRangeMessage" xml:space="preserve">
    <value>Low Alarm can not be greater than {0}.</value>
  </data>
  <data name="IFxLAlarmOutMinRangeMessage" xml:space="preserve">
    <value>Low Alarm can not be smaller than {0}.</value>
  </data>
  <data name="IFxLAlarmOverHAlarm" xml:space="preserve">
    <value>Low Alarm can not be greater than High Alarm.</value>
  </data>
  <data name="IFxLAlarmUnderLLAlarm" xml:space="preserve">
    <value>Low Alarm can not be smaller than Low Low Alarm.</value>
  </data>
  <data name="IFxLLAlarmOutMaxRangeMessage" xml:space="preserve">
    <value>Low Low Alarm can not be greater than {0}.</value>
  </data>
  <data name="IFxLLAlarmOutMinRangeMessage" xml:space="preserve">
    <value>Low Low Alarm can not be smaller than {0}.</value>
  </data>
  <data name="IFxLLAlarmOverLAlarm" xml:space="preserve">
    <value>Low Low Alarm can not be greater than Low Alarm.</value>
  </data>
  <data name="IFxVerifyValueRangeMessage" xml:space="preserve">
    <value>{0} value can not be smaller than {1} value {2}  or exceed {3} value {4}.</value>
  </data>
  <data name="IF4BuildErrorDescription" xml:space="preserve">
    <value>2085-IF4 channel {0} : {1}</value>
  </data>
  <data name="IF8BuildErrorDescription" xml:space="preserve">
    <value>2085-IF8 channel {0} : {1}</value>
  </data>
  <data name="InitIF4MgrFailedMessage" xml:space="preserve">
    <value>Initialize Expansion Module IF4 failed.</value>
  </data>
  <data name="InitIF8MgrFailedMessage" xml:space="preserve">
    <value>Initialize Expansion Module IF8 failed.</value>
  </data>
  <data name="IFxChannel" xml:space="preserve">
    <value>Channel</value>
  </data>
    <data name="IFxChannel22222" xml:space="preserve">
    <value>Channel33334444</value>
  </data>
  <data name="IFxChannel33333" xml:space="preserve">
    <value>Channel33334444</value>
  </data>
  <data name="IFxChannel5656" xml:space="preserve">
    <value>Channel5656</value>
  </data>
  <data name="IFxChannel787878" xml:space="preserve">
    <value>Channel5656</value>
  </data>
  <data name="IFxChannel9999999999" xml:space="preserve">
    <value>Channe9999996</value>
  </data>
</root>
